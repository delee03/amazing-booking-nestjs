// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
 
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  name      String?
  avatar    String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
  comments  Comment[]
  role      Role    @default(USER)
}

model Room {
   id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  typeRoom    String       // Loại phòng (ví dụ: đơn, đôi, suite, ...)
  extension   String[]     // Danh sách tiện ích, lưu dưới dạng mảng
  hotel       Hotel        @relation(fields: [hotelId], references: [id])
  hotelId     String       @db.ObjectId
  bookings    Booking[]
  images      RoomImages[] // Thêm quan hệ với bảng RoomImages
  comments    Comment[]    // Add opposite relation field for Comment model
}


model Location {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  city String
  style String
  country String
  hotels Hotel[] // 1 Location has many hotels
}

model Hotel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  location Location @relation(fields: [locationId], references: [id])
  locationId String @db.ObjectId
  rooms Room[] // 1 Hotel has many rooms
  images HotelImages[] // 1 Hotel has many images
}

model HotelImages {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  url String
  hotel Hotel @relation(fields: [hotelId], references: [id])
  hotelId String @db.ObjectId
}


model RoomImages {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  url String
  room Room @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  checkIn   DateTime
  checkOut  DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  star      Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  room     Room    @relation(fields: [roomId], references: [id])
  roomId   String   @db.ObjectId
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN

}

